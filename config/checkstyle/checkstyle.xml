<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
	Fortumo Java Checkstyle configuration, based on Google coding standards.
	Version: 1.4



  Checkstyle configuration that checks the Google coding conventions from:

  -  Google Java Style
      https://google-styleguide.googlecode.com/svn-history/r130/trunk/javaguide.html

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Original authors: Max Vetrenko, Ruslan Diachenko, Roman Ivanov.
 -->

<module name = "Checker">
    <property name="charset" value="UTF-8"/>

    <property name="severity" value="warning"/>

    <property name="fileExtensions" value="java, properties, xml"/>

    <!-- to use SuppressWarningsFilter annotation            -->
    <module name="SuppressWarningsFilter" />

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>
    <module name="TreeWalker">

        <!-- to use SuppressWarningsFilter annotation -->
        <module name="SuppressWarningsHolder" />

        <!-- Nested blocks are not allowed -->
        <module name="AvoidNestedBlocks"/>

        <!-- Visible internal properties not allowed -->
        <module name="VisibilityModifier"/>

        <!-- Singletons need to be final -->
        <module name="FinalClass"/>

        <!--
            No sense in having a visible constructor for the utility
            classes, which define only static methods.
        -->
        <module name="HideUtilityClassConstructor"/>

        <!-- Exceptions must be immutable -->
        <module name="MutableException"/>

        <!-- Array elements should have trailing commas -->
        <module name="ArrayTrailingComma"/>

        <!-- No inline conditionals - zero benefit, hard to read -->
        <module name="AvoidInlineConditionals"/>

        <!-- No empty statements - figure out a better way -->
        <module name="EmptyStatement"/>

        <!-- Remove potential NullPointerExceptions in string equal -->
        <module name="EqualsAvoidNull"/>

        <!-- hashCode must be implemented if equals is implemented -->
        <module name="EqualsHashCode"/>

        <!--
            Do make local variables final, see open questions (parameter assignment).
        -->
        <module name="FinalLocalVariable">
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>

        <!-- No inner assignments - total pain to debug -->
        <module name="InnerAssignment"/>

        <!-- No modification of control variables - (facepalm) -->
        <module name="ModifiedControlVariable"/>

        <!--
            Keeping boolean expressions simple, but can be removed
            if it turns out to be problematic.
        -->
        <module name="SimplifyBooleanExpression"/>

        <!-- Sanity check -->
        <module name="StringLiteralEquality"/>

        <!-- Nested for loop depth, set to 3 for now -->
        <module name="NestedForDepth">
            <property name="max" value="3"/>
        </module>

        <!-- Nested if depth, set to 3 for now -->
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>

        <!-- Nested try depth should not be more than 1 -->
        <module name="NestedTryDepth"/>

        <!-- No cloning -->
        <module name="NoClone"/>
        <!--
            Catching runtimes/catchalls is a BAD BAD BAD idea.
            List defined as:
                java.lang.Exception
                java.lang.Throwable
                java.lang.RuntimeException
        -->
        <module name="IllegalCatch"/>

        <!-- Same for throwing exceptions -->
        <module name="IllegalThrows"/>

        <!-- Yes, package has to be declared -->
        <module name="PackageDeclaration"/>

        <!-- Reduce method complexity -->
        <module name="ReturnCount">
            <property name="max" value="300"/>
        </module>

        <!--
            Rationale: Helps reduce coupling on concrete classes. In addition abstract classes should be thought of as convenient base class implementations of interfaces, and as such, are not types themselves.

            Should be reviewed if this is causing too much issues.
        -->
        <module name="IllegalType"/>

        <!-- Explicit initialization is not needed -->
        <module name="ExplicitInitialization"/>

        <!-- Default has to come last -->
        <module name="DefaultComesLast"/>

        <!-- No default constructors -->
        <module name="MissingCtor"/>

        <!-- Create a variable -->
        <module name="MultipleStringLiterals"/>

        <!-- Explicitly require this -->
        <module name="RequireThis"/>

        <!-- No need to import statics -->
        <module name="AvoidStaticImport"/>

        <!-- Sanity check -->
        <module name="IllegalImport"/>

        <!-- Sanity check -->
        <module name="RedundantImport"/>

        <!-- Check for decently formatted javadoc -->
        <module name="JavadocStyle"/>

        <!-- Boolean expression complexity (seriously, more than 3?) -->
        <module name="BooleanExpressionComplexity"/>

        <!-- This could be removed if it gets too troublesome -->
        <module name="ClassDataAbstractionCoupling"/>

        <!-- This could be removed if it gets too troublesome -->
        <module name="ClassFanOutComplexity"/>

        <!-- Cyclomatic complexity MUST not be higher than 10 -->
        <module name="CyclomaticComplexity"/>

        <!-- Split up too complex stuff -->
        <module name="NPathComplexity"/>

        <!-- I do believe into Steve McConnel -->
        <module name="TrailingComment"/>

        <!-- No too long methods (150 default) -->
        <module name="MethodLength">
            <property name="max" value="42"/>
        </module>

        <!-- Each class into their own file -->
        <module name="OuterTypeNumber"/>

        <!-- Original Google set -->
        <module name="OuterTypeFilename"/>
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format" value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message" value="Avoid using corresponding octal or Unicode escape."/>
        </module>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>
        <module name="LineLength">
            <property name="max" value="120"/>
            <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
        </module>
        <module name="AvoidStarImport"/>
        <module name="OneTopLevelClass"/>
        <module name="NoLineWrap"/>
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>
        <module name="NeedBraces"/>
        <module name="LeftCurly">
            <!-- If the line is wrapped then use the next line policy -->
            <property name="option" value="nlow"/>
            <property name="maxLineLength" value="100"/>
        </module>
        <module name="RightCurly"/>
        <module name="RightCurly">
            <property name="option" value="alone"/>
            <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT"/>
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
            <message key="ws.notPreceded"
                     value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="OneStatementPerLine"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="ArrayTypeStyle"/>
        <module name="MissingSwitchDefault"/>
        <module name="FallThrough"/>
        <module name="UpperEll"/>
        <module name="ModifierOrder"/>
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern"
                     value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="TypeName">
            <message key="name.invalidPattern"
                     value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <property name="allowOneCharVarInForLoop" value="true"/>
            <message key="name.invalidPattern"
                     value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="NoFinalizer"/>
        <module name="GenericWhitespace">
            <message key="ws.followed"
                     value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                     value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="4"/>
            <property name="throwsIndent" value="4"/>
            <property name="lineWrappingIndentation" value="4"/>
            <property name="arrayInitIndent" value="4"/>
        </module>
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="1"/>
        </module>
        <module name="OverloadMethodsDeclarationOrder"/>
        <module name="VariableDeclarationUsageDistance"/>
        <module name="CustomImportOrder">
            <property name="specialImportsRegExp" value="io.fortumo"/>
            <property name="sortImportsInGroupAlphabetically" value="true"/>
            <property name="customImportOrderRules" value="STATIC###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE"/>
        </module>
        <module name="MethodParamPad"/>
        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property name="tokens" value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>
        </module>
        <module name="AnnotationLocation">
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
            <property name="allowSamelineSingleParameterlessAnnotation" value="true"/>
        </module>
        <module name="AnnotationLocation">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>
        <module name="NonEmptyAtclauseDescription"/>
        <module name="JavadocTagContinuationIndentation"/>
        <module name="SummaryJavadocCheck">
            <property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>
        <module name="JavadocParagraph"/>
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <module name="JavadocMethod">
            <property name="scope" value="public"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingThrowsTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="minLineCount" value="2"/>
            <property name="allowedAnnotations" value="Override, Test"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
        </module>
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
            <message key="name.invalidPattern"
                     value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="SingleLineJavadoc"/>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected|ignore|ok"/>
            <property name="commentFormat" value="This is expected."/>
        </module>
    </module>
</module>