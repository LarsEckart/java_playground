name: Run tests

on:
  push:
    branches:
    - main
    paths:
      - '**.java'
      - 'build.gradle'
      - 'gradle/wrapper/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches:
    - main
    paths:
      - '**.java'
      - 'build.gradle'
      - 'gradle/wrapper/**'
#  schedule:
#    - cron: "0 */3 * * *"

# Cancel existing executions when new commits are pushed onto the branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 10
    strategy:
      matrix:
        java: [ 21 ]
        os: [ ubuntu, windows ]
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java }}
          cache: 'gradle'
      - name: Setup Testcontainers Cloud Client
        uses: atomicjar/testcontainers-cloud-setup-action@v1
        with:
          token: ${{ secrets.TC_CLOUD_TOKEN }}
      - name: Run Gradle's test task
        run: ./gradlew -i --no-daemon --parallel --continue --build-cache --stacktrace test
        env:
          GH_USERNAME: 'GitHub Action'
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
      - uses: actions/upload-artifact@v3  # upload test results
        if: success() || failure()        # run this step even if previous step failed
        with:
          name: test-results
          path: build/test-results/test
      - uses: dorny/test-reporter@v1
        with:
          name: JUnit Tests                  # Name of the check run which will be created
          artifact: test-results            # artifact name
          path: '**/*.xml'                     # Path to test results (inside artifact .zip)
          reporter: java-junit              # Format of test results
  auto-merge:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: auto-merge
        if: |
          github.actor == 'dependabot[bot]' &&
          github.event_name == 'pull_request'
        run: |
          gh pr merge --auto --rebase "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          # this secret needs to be in the settings.secrets.dependabot
          GITHUB_TOKEN: ${{secrets.GH_ACTION_TOKEN}}
