
plugins {
    id "com.github.ben-manes.versions" version "0.28.0"
    id "net.ltgt.errorprone" version "1.2.1"
    id "java"
    id "idea"
    id "com.vanniktech.dependency.graph.generator" version "0.5.0"
}

repositories {
    maven() {
        url "https://dl.bintray.com/mockito/maven/"
        content {
            includeGroup "org.mockito"
        }
    }
    mavenCentral()
}

dependencies {
    errorprone("com.google.errorprone:error_prone_core:2.3.4")

    implementation("com.fasterxml.jackson.core:jackson-databind:2.11.1")
    implementation("com.squareup.moshi:moshi:1.9.3")
    implementation("io.reactivex.rxjava3:rxjava:3.0.4")
    implementation("io.projectreactor:reactor-core:3.3.3.RELEASE")
    implementation("org.threeten:threeten-extra:1.5.0")
    implementation("org.slf4j:slf4j-api:1.7.30")
    implementation("ch.qos.logback:logback-classic:1.3.0-alpha5")
    implementation("ch.qos.logback:logback-core:1.3.0-alpha5")
    implementation("org.owasp.encoder:encoder:1.2.2")
    implementation("com.hazelcast:hazelcast:4.0.1")
    implementation("javax.cache:cache-api:1.1.1")

    implementation("org.hibernate:hibernate-core:5.4.14.Final")
    implementation("net.ttddyy:datasource-proxy:1.6")
    implementation("mysql:mysql-connector-java:8.0.20")
    implementation("org.eclipse.collections:eclipse-collections-api:10.2.0")
    implementation("org.eclipse.collections:eclipse-collections:10.2.0")


    def junit4Version = "4.13"
    def junitVintageVersion = "5.6.2"
    def junitJupiterVersion = "5.6.2"
    def junitPlatformVersion = "1.6.2"

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")
    testImplementation("junit:junit:${junit4Version}")

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}") {
        because "allows JUnit 3 and JUnit 4 tests to run"
    }
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}") {
        because "allows tests to run from IDEs that bundle older version of launcher"
    }

    // https://mvnrepository.com/artifact/org.netbeans/jemmy
    testImplementation group: "org.netbeans", name: "jemmy", version: "2.2.7.5"

    def mockitoVersion = "3.3.9"
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    testImplementation("org.assertj:assertj-core:3.16.1")
    testImplementation("com.google.truth:truth:1.0.1")
    testImplementation("com.google.truth.extensions:truth-java8-extension:1.0.1")
    testImplementation("pl.pragmatists:JUnitParams:1.1.1")
    testImplementation("com.squareup.okhttp3:mockwebserver:4.7.2")
    testImplementation("com.approvaltests:approvaltests:9.1.0")
    testImplementation("org.awaitility:awaitility-groovy:4.0.2")
    testImplementation("com.tngtech.archunit:archunit:0.14.1")

    testImplementation("org.slf4j:slf4j-simple:1.7.30") {
        because "allows a library to log during tests even when only log4j api is on path"
    }

    def testcontainersVersion = "1.14.3"
    testImplementation("org.testcontainers:testcontainers:${testcontainersVersion}")
    testImplementation("org.testcontainers:junit-jupiter:${testcontainersVersion}")
    testImplementation("org.testcontainers:mysql:${testcontainersVersion}")
}

task copyDependenciesToLibs(type: Copy) {
    into "libs"
    from configurations.compile
}

tasks.withType(JavaCompile) {
    options.compilerArgs.add("-Xlint:all")
    options.compilerArgs.add("--enable-preview")

    options.incremental = true

    options.errorprone {
        disableWarningsInGeneratedCode = true
        allErrorsAsWarnings = true
        disableAllChecks = true
    }
}


test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
    }
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    jvmArgs("--enable-preview")
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ["alpha", "beta", "rc", "cr", "m", "preview", "b", "ea"].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]$qualifier[.\d-+]*/
      }
      if (rejected) {
        selection.reject("Release candidate")
      }
    }
  }
}
