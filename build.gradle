plugins {
    id "com.github.ben-manes.versions" version "0.53.0"
    id "net.ltgt.errorprone" version "4.3.0"
    id "java"
    id "idea"
    id "application"
    id "com.vanniktech.dependency.graph.generator" version "0.8.0"
    id("com.diffplug.spotless") version "8.0.0"
//    id "com.libyear.libyear-gradle-plugin" version "0.1.6"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    errorprone("com.google.errorprone:error_prone_core:2.42.0") {
        because "errorprone version is different from plugin version"
    }

    implementation('com.fasterxml.jackson.core:jackson-databind:2.20.0')
    implementation("io.reactivex.rxjava3:rxjava:3.1.12")
    implementation('io.projectreactor:reactor-core:3.7.11')
    implementation("org.threeten:threeten-extra:1.8.0")
    implementation("org.slf4j:slf4j-api:2.0.17")
    implementation("ch.qos.logback:logback-classic:1.5.18")
    implementation("ch.qos.logback:logback-core:1.5.18")
    implementation("org.owasp.encoder:encoder:1.3.1")
    implementation("com.hazelcast:hazelcast:5.5.0")
    implementation("javax.cache:cache-api:1.1.1")
    implementation('commons-codec:commons-codec:1.19.0')
    implementation("com.google.code.gson:gson:2.13.2")
    implementation("org.apache.commons:commons-csv:1.14.1")
    implementation('org.apache.commons:commons-lang3:3.19.0')

    implementation("org.hibernate:hibernate-core:7.1.3.Final")
    implementation("net.ttddyy:datasource-proxy:1.11.0")
    implementation("org.postgresql:postgresql:42.7.8")
    implementation("io.lettuce:lettuce-core:6.8.1.RELEASE")
    implementation("software.amazon.awssdk:s3:2.34.5")
    implementation 'redis.clients:jedis:6.2.0'
    implementation("org.eclipse.collections:eclipse-collections-api:13.0.0")
    implementation("org.eclipse.collections:eclipse-collections:13.0.0")
    implementation("org.apache.commons:commons-pool2:2.12.1")
    implementation 'org.dom4j:dom4j:2.2.0'
    implementation 'com.google.crypto.tink:tink:1.18.0'

    implementation 'com.google.zxing:core:3.5.3'
    implementation 'com.google.zxing:javase:3.5.3'

    testImplementation 'com.github.mwiede:jsch:2.27.3'
    testImplementation 'com.hierynomus:sshj:0.40.0'
    implementation 'io.vavr:vavr:1.0.0-alpha-4'

    implementation("javax.servlet:servlet-api:2.5")

    // jep 320
    implementation("org.glassfish.jaxb:jaxb-runtime:4.0.6")
    implementation("org.glassfish.jaxb:jaxb-xjc:4.0.6")
    implementation("com.sun.xml.ws:jaxws-rt:4.0.3")
    implementation("javax.activation:activation:1.1.1")

    def junit4Version = "4.13.2"
    def junitVintageVersion = "5.13.4"
    def junitJupiterVersion = "5.13.4"
    def junitPlatformVersion = "1.13.4"

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")
    testImplementation("junit:junit:${junit4Version}")

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testImplementation("org.junit.platform:junit-platform-suite-engine:${junitPlatformVersion}")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}") {
        because "allows JUnit 3 and JUnit 4 tests to run"
    }
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}") {
        because "allows tests to run from IDEs that bundle older version of launcher"
    }

    testImplementation("com.approvaltests:approvaltests:25.4.3")

    def mockitoVersion = "5.19.0"
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    testImplementation('org.assertj:assertj-core:3.27.6')
    testImplementation("pl.pragmatists:JUnitParams:1.1.1")
    testImplementation('com.squareup.okhttp3:mockwebserver:5.1.0')
    testImplementation("org.awaitility:awaitility-groovy:4.3.0")
    testImplementation("com.tngtech.archunit:archunit:1.4.1")
    testImplementation("net.datafaker:datafaker:2.5.1")
    testImplementation('nl.jqno.equalsverifier:equalsverifier:4.1.1')

    testImplementation("org.slf4j:slf4j-simple:2.0.17") {
        because "allows a library to log during tests even when only log4j api is on path"
    }

    def testcontainersVersion = "1.21.3"
    testImplementation("org.testcontainers:testcontainers:${testcontainersVersion}")
    testImplementation("org.testcontainers:junit-jupiter:${testcontainersVersion}")
    testImplementation("org.testcontainers:postgresql:${testcontainersVersion}")
    testImplementation("org.testcontainers:localstack:${testcontainersVersion}")
    testImplementation "com.redis:testcontainers-redis:2.2.4"

    testImplementation("com.larseckart:junit-tcr-extensions:1.0.0")
    testImplementation("com.github.kirviq:dumbster:1.7.1")

    testImplementation 'org.tonicsoft.timebomb:timebomb-junit:0.0.0'
    testImplementation 'com.innoq:junit5-logging-extension:0.2.0'
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

tasks.withType(Tar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Zip) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('copyDependenciesToLibs', Copy) {
    into "libs"
    from configurations.compileClasspath
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    //options.compilerArgs.add("-Xlint:all")
    options.compilerArgs += ["--enable-preview", "--should-stop=ifError=FLOW"]

    options.incremental = true

    dependsOn 'spotlessApply'

    options.errorprone {
        allErrorsAsWarnings = true
        disableWarningsInGeneratedCode = true
        allErrorsAsWarnings = true
        disableAllChecks = true
        // --should-stop=ifError=FLOW
    }
}

// application and main class definition
application {
    mainClass = 'lars.Main'
}


test {
    useJUnitPlatform()
    testLogging {
        events "SKIPPED", "FAILED"
        exceptionFormat "full"
    }
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    jvmArgs("--enable-preview")
}


tasks.withType(Test).configureEach {
    jvmArgs += "--enable-preview"
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += "--enable-preview"
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ["alpha", "beta", "rc", "cr", "m", "preview", "b", "ea"].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]$qualifier[.\d-+]*/
            }
            if (rejected) {
                selection.reject("Release candidate")
            }
        }
    }
}

spotless {
    java {
        googleJavaFormat()
        formatAnnotations()
    }
}
//libyear {
//    // gw -q dependencies --configuration compileClasspath
//    configurations = ['compileClasspath']
//    failOnError = false
//    validator = allArtifactsCombinedMustNotBeOlderThan(years(100)) // just so that build doesnt fail
//}
