buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.21.0'
        classpath 'org.kordamp.gradle:jdeps-gradle-plugin:0.6.0'
    }
}

plugins {
    id 'org.kordamp.gradle.jdeprscan' version '0.4.0'
    id 'org.kordamp.gradle.jdeps' version '0.6.0'
    id 'net.ltgt.errorprone' version '0.7.1'
}

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'java'
apply plugin: 'idea'

repositories {
    maven() {
        url 'https://dl.bintray.com/mockito/maven/'
        content {
            includeGroup 'org.mockito'
        }
    }
    mavenCentral()
}

dependencies {
    errorprone("com.google.errorprone:error_prone_core:2.3.3")

    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
    compile 'com.google.code.gson:gson:2.8.5'
    compile 'com.squareup.moshi:moshi:1.8.0'
    compile 'com.alibaba:fastjson:1.2.56'
    compile 'io.reactivex.rxjava2:rxjava:2.2.8'

    def junit4Version = '4.12'
    def junitVintageVersion = '5.4.1'
    def junitJupiterVersion = '5.4.1'
    def junitPlatformVersion = '1.4.1'

    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")
    testCompile("junit:junit:${junit4Version}")

    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}") {
        because 'allows JUnit 3 and JUnit 4 tests to run'
    }
    testRuntime("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}") {
        because 'allows tests to run from IDEs that bundle older version of launcher'
    }

    testImplementation 'org.assertj:assertj-core:3.12.2'
    testImplementation 'org.mockito:mockito-core:2.25.7'
    testImplementation 'org.mockito:mockito-junit-jupiter:2.25.7'
    testImplementation 'pl.pragmatists:JUnitParams:1.1.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.14.0'
    testImplementation 'com.approvaltests:approvaltests:2.0.2'
    testImplementation 'org.awaitility:awaitility-groovy:3.1.6'
}

task copyDependenciesToLibs(type: Copy) {
    into "libs"
    from configurations.compile
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" //<< "-Werror"

    options.errorprone {
        disableWarningsInGeneratedCode = true
        disableAllChecks = true
    }
}
sourceCompatibility = '11'
targetCompatibility = '11'

test {
    useJUnitPlatform()
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]$qualifier[.\d-+]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}
